#include <iostream>
using namespace std; 

class Smartphone {
    public: 
    virtual void TakeASelfie() = 0; // this is abstract, you need to implement it in your own derived classes  
}; // now the class Smartphone is now an ABSTRACT class 
/* side notes about abstract classes: we cannot make instances but we can make pointers of abstrat classes
and Smartphone class will not provide implementations for TakeASelfie fcn (method). Now interface (abstracted layer) is created.

*/
class Android : public Smartphone { // derived class called: Android 
public: 
void TakeASelfie() {
    cout << "Android selfie\n"; 
}
};
class IPhone : public Smartphone { 
    void TakeASelfie() { // overrriding the pue virtual fcn/method in derived class, otherwise derived class becomes an abstract class itself.
        cout << "IPhone selfie\n"; 
    }
};

int main()
{
    Smartphone* s1 = new Android(); // new is a key word for dynamic memoery allocation. It creates and Android object in the heap memory by occupying a block of code in the heap mempry for Android.
// s1 is a pointer that points to the Android object, but using the base class object.  to the Smartphone base class/object. . this allows polymorphism meaning we can call /invoke the method/fcn defined/declared
// in the derived class using the base class pointer. new /android returns the address of the newly-created object. 
// new Android on its own only creates an object of Android in the heap memory but here it also stores the address of Android in the heap memory. s1 only stores the memory address of the object. 
    s1 -> TakeASelfie(); // since we used pointer  we use -> to call the method otherwise use dot sign '.' . this is creating an object of derived calss using a pointer of base class. 
Smartphone* s2 = new IPhone();
    s2 -> TakeASelfie(); 
    return 0; // or: system("pause>0"); 
}
/* make a class as interface while hiding all details and complex parts
make a class, provide interface so that anyone using my class does not need to know details of my complex details of how certain functionality and implementations are made, coffe machine example 
to access members of  aclass use dot sign '.' but to access pointer members use '->' 
why not to have: Smartphone s1; to create an object of class? because Smartphone is an abstract class (has a virtual fcn/method assigned to 0); and abstract classes cannot have: objects (cannot be instantiated)
int* (data_type or class_name) denotes a pointer variable. a pointer is a variable that stores the memory address of another variable. int* nptr; this declaration states that nptr is a pointer variable that holds the 
address of an integer/class_type varaible. note in cpp we cal also call the class_type: class_object. So; asterisk (*) means pointer variable, and ampersand (&) means address of operator. 
* is called dereference operator and & is called the reference operator. in our case: s1 is a pointer to Smartphone class_object. s1 hols the memory address of Smartphone.      
--- asterisk and ampersand: 
Asterisk (*) is pointer: Declares a pointer: int* p (stores a memory address) 
Dereferences a pointer: *p = 10; (access/change the value at that address) 
Ampersand (&) is Reference OR Adress-of 
Reference (alias): int a = 5; int& ref = a; here ref is another name /alias for a;
Adress-of: int* p = &a; (&a gets a's memory address). 
*/ 
/*
if a base class has a pure virtual function, the derived class becomes an abstract class itself unless we override the function. in other words, if we make a function pure virtual, the class comprising this 
becomes abstract class. Abstract class cannot be instantiated (we cannot make an object of it). Now if we derive / inherit a child class from this base class; we should override (use the same function in base class), 
otherwise the derived class becomes abstract itself. You should implement the pure virtual function in Base class in derived class. Polymorphism in this example means: we use base class pointer to call 
to call the function, but the actual function that runs is from th ederived class, based on the object type. this works because function is virtual enabling runtime decision of which function to call.   
