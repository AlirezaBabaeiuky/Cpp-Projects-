#include <iostream>
#include <string>
using namespace std;

// Class represents a template (blueprint) and object is an instance of that class with features
class Car {
private: // Access modifier - members under private cannot be accessed directly outside the class
    string Name;   // Define the members of the class types here and variable names
    string OwnerName;
    int Year;
    int arr[3][2];

public: // Access modifier - members under public can be accessed directly outside the class
    // Constructor to initialize the Car object
    Car(string name, string ownername, int year, int array[3][2]) {
        Name = name;
        OwnerName = ownername;
        Year = year;
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 2; ++j) {
                arr[i][j] = array[i][j];
            }
        }
    }

    // Public method to get information of the car
    void GetInfo() {
        cout << "Car Name: " << Name << endl;
        cout << "Owner Name: " << OwnerName << endl;
        cout << "Year: " << Year << endl;
        cout << "Array Elements: " << endl;
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 2; ++j) {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
    }

    // Public method to update the car's information --> which is another initializer 
    void SetInfo(string name, string ownername, int year, int array[3][2]) {
        Name = name;
        OwnerName = ownername;
        Year = year;
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 2; ++j) {
                arr[i][j] = array[i][j];
            }
        }
    }
};

int main() {
    // Array to initialize the car's array
    int arr[3][2] = {{1, 2}, {3, 4}, {5, 6}};

    // Define the object of 'Car' class and initialize it using the constructor
    Car DealerCars("Lexus", "Alex", 2016, arr);
    
    // Call the GetInfo method to display the car's details
    DealerCars.GetInfo();

    // Update the car's information
    int newArr[3][2] = {{7, 8}, {9, 10}, {11, 12}};
    DealerCars.SetInfo("Toyota", "Alice", 2020, newArr);

    // Call the GetInfo method again to display the updated car's details
    DealerCars.GetInfo();

    return 0;
}

/* 
#include <iostream>
# include <string>

using namespace std; 

class Car { 
    private: 
    string Name;
    int Year; 
    
    public: 
    Car(string name, int year) { 
    Name = name; 
    Year = year; 
    }
    void DisplayInfo() { 
        cout << Name << endl;
        cout << Year << endl; 
    }
    void UpdateInfo(string name, int year) { 
        Name = name; 
        Year = year; 
    }
};

int main()
{
    // first make an object of the 'Car' class 
    Car DSP("BMW", 2015); 
    DSP.DisplayInfo();
    DSP.UpdateInfo("Lexus", 2018);
    DSP.DisplayInfo(); 

    return 0;
}
*/
