/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
# include <memory> 

using namespace std;  

class A {
    public: // class name is A and we may call it as object as well  
    void printA() {cout << "A struct ... " << endl; // this is method (fcn) to be called in the main code block
    }
}; 

int main()
{
    unique_ptr<A> p1(new A); // here: unique_ptr is smart pointer to avoid memory leakage <A> is class or object name
    // p1 is the name of the owner of class A as it goes out of scope all A will be destroyed 
    // let's call the fcn 
    p1->printA(); 
    cout << "Adress of the containing pointer: " << p1.get() << endl;
    // now to copy the address stored in p1 should be copied to p2 using MOVING SEMANTICS
    unique_ptr<A> p2 = move(p1); 
    p2->printA(); 
    cout << p1.get() << endl;
    cout << p2.get() << endl; 
    
    
    return 0;
}

/* 
// C++ program to illustrate the use of make_shared
#include <iostream>
#include <memory>
using namespace std;

int main()
{
    // Creating shared pointers using std::make_shared
    shared_ptr<int> shr_ptr1 = make_shared<int>(42);
    shared_ptr<int> shr_ptr2 = make_shared<int>(24);
    // Accessing the values using the dereference operator
    // (*)
    cout << "Value 1: " << *shr_ptr1 << endl;
    cout << "Value 2: " << *shr_ptr2 << endl;
    // Using the assignment operator (=) to share ownership
    shared_ptr<int> shr_ptr3 = shr_ptr1;
    // Checking if shared pointer 1 and shared pointer 3
    // point to the same object
    if (shr_ptr1 == shr_ptr3) {
        cout << "shared pointer 1 and shared pointer 3 "
                "point to the same object."
             << endl;
    }
    // Swapping the contents of shared pointer 2 and shared
    // pointer 3
    shr_ptr2.swap(shr_ptr3);
    // Checking the values after the swap
    cout << "Value 2 (after swap): " << *shr_ptr2 << endl;
    cout << "Value 3 (after swap): " << *shr_ptr3 << endl;
    // Using logical operators to check if shared pointers
    // are valid
    if (shr_ptr1 && shr_ptr2) {
        cout << "Both shared pointer 1 and shared pointer "
                "2 are valid."
             << endl;
    }
    // Resetting a shared pointer
    shr_ptr1.reset();
}
also try my code in the following: 
#include <iostream>
#include <memory>
using namespace std; 

class A { 
    public: 
    void printA() { 
        cout << "A ..." << endl; 
    } 
};

int main()
{
    A objA; 
    objA.printA(); 
    // smart pointer 
    unique_ptr<A> p1(new A);
    p1->printA(); 
    cout << p1.get() << endl; 
    unique_ptr<A> p2 = move(p1);
    p2->printA(); 
    cout << p1.get() << " " << p2.get() << endl; 

    return 0;
}

*/
