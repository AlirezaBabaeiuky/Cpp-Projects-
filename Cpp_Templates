// templates.cpp
// This program demonstrates the usage of function and class templates in C++

#include <iostream> // Includes the input-output stream library to use cout and cin

using namespace std; // Allows use of standard library names (like cout, endl) without prefixing them with 'std::'

// --------------------------------------------
// FUNCTION TEMPLATE
// --------------------------------------------

// Function template declaration and definition
// 'template <typename T>' allows the function to work with any data type T (e.g., int, float, double, etc.)
template <typename T>
T add(T a, T b) {
    // This function takes two parameters of type T and returns their sum
    return a + b; // The '+' operator is used assuming it is defined for type T
}

// --------------------------------------------
// CLASS TEMPLATE
// --------------------------------------------

// Class template that can work with any data type T
template <typename T>
class Calculator {
private:
    T num1, num2; // Two private member variables of type T to hold values for calculation

public:
    // Constructor to initialize num1 and num2 with the given values
    Calculator(T n1, T n2) : num1(n1), num2(n2) {}

    // Method to add the two numbers
    T add() {
        return num1 + num2; // Returns the sum of num1 and num2
    }

    // Method to subtract the second number from the first
    T subtract() {
        return num1 - num2; // Returns the difference between num1 and num2
    }
};

// --------------------------------------------
// MAIN FUNCTION - Program entry point
// --------------------------------------------
int main() {
    // -------------------------------
    // Using the function template
    // -------------------------------

    // Call the function template 'add' with integer arguments
    // Here, <int> explicitly specifies the type T as 'int'
    cout << "Addition of integers: " << add<int>(5, 3) << endl;

    // Call the function template 'add' with double arguments
    // Here, <double> explicitly specifies the type T as 'double'
    cout << "Addition of doubles: " << add<double>(5.5, 3.3) << endl;

    // -------------------------------
    // Using the class template
    // -------------------------------

    // Create an object of Calculator class for type 'int'
    // The object intCalc is initialized with values 10 and 5
    Calculator<int> intCalc(10, 5);

    // Call the add() method of intCalc object
    cout << "Integer addition: " << intCalc.add() << endl;

    // Call the subtract() method of intCalc object
    cout << "Integer subtraction: " << intCalc.subtract() << endl;

    // Create an object of Calculator class for type 'double'
    // The object doubleCalc is initialized with values 10.5 and 5.5
    Calculator<double> doubleCalc(10.5, 5.5);

    // Call the add() method of doubleCalc object
    cout << "Double addition: " << doubleCalc.add() << endl;

    // Call the subtract() method of doubleCalc object
    cout << "Double subtraction: " << doubleCalc.subtract() << endl;

    // Return 0 to indicate successful execution of the program
    return 0;
}
