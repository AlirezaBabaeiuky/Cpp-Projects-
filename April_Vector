/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include <algorithm>
#include <array>
#include <iterator>
#include <string>
#include <bits/stdc++.h>

using namespace std; // to avoid prefixing :: (access identifiers to the members)
// User-defiend method / function to print vector 
void PrintVector1(vector<int>& v1) {
    cout << endl << "printing vector via user-defined method/function: "; 
    for (auto i : v1) {
        cout << i << " ";
    }
    cout << endl; 
}
// another user-defined method / function to print an array
void PrintArray1 (int arr1[], int array1size) {
    cout << "using user-defined method/function to print array: ";  
    for (int i=0; i<array1size; i++) {
        cout << arr1[i] << " "; 
    }
    cout << endl; 
}

int main()
{
    vector<int> vec1 = {1, 2, 3, 5, 4}; // in array we have syntax: array<int, size_array> array_name 
    int sizevec1 = sizeof(vec1) / sizeof(vec1[0]); 
    // invoking / calling the user-defiend functions
    PrintVector1(vec1); 
    array<int, 4> array1 = {3, 2, 1, 4}; // this not acceptable as argument/input to the 'PrintArray1' function
    // as the mentione dmethod only accepts int type and NOTE: int type is different than array type!!! 
    int array2[] = {3, 1, 2, 4};
    int sizearray2 = sizeof(array2) / sizeof(array2[0]); 
    // invoking th euser-defined method / function 
    PrintArray1(array2, sizearray2); // check what type of inputs/arguments you need to feed in!!!
    
    // Inserting elements into Vectors 
    vector<char> vec2 = {'a', 'b', 'f', 'e'};
    // inserting v at the back end 
    vec2.push_back('3'); 
    for (auto i:vec2) {
        cout << i << " "; 
    } 
    cout << endl; 
    // inserting an element at index 2:
    vec2.insert(vec2.begin() + 2, 'i'); 
    for (auto i:vec2) { 
        cout << i << " ";
    }
    cout << endl; 
    
    // accessing elements 
    cout << "accessing specific element in the array: ";
    cout << vec2.at(3) << endl; 
    
    // updating or over-writing is also possible 
    // getting the size 
    cout << vec2.size() << endl; 
    
    // Traversing means usng range-based-for-loop to print 
    for (auto i : vec2) {
        cout << i << " "; 
    }
    cout << endl; 
    /* cout << "for loop: ";
    int endforloop = vec2.size(); 
    for (int i=0; endforloop; i++) { 
        cout << vec2[i] << " "; 
    }
    */ 
    
    // deleting element: vec2.pop_back(); or the following: 
    vec2.erase(find(vec2.begin(), vec2.end(), 'f'));
    for (auto i : vec2) { 
        cout << i << " "; 
    }
    cout << endl; 
    
    // checking if vector is empty or not 
    bool x = vec2.empty(); 
    cout << x << "; x here is boolean variable with 0 as false and 1 as true" << endl;
    // or other method is: 
    if (vec2.empty()) { 
        cout << "Empty"; 
        } 
        else { 
            cout << "Not Empty";
        }
    
    // resizing vector 
    cout << endl; 
    vec2.resize(9);
    for ( auto i : vec2) { 
        cout << i << " "; 
    }
    cout << endl; 
    
    // sorting 
    vector<int> vec3 = {100, 40, 20, 30, 10};
    cout << "Sorting a vector in ascending order: ";
    sort(vec3.begin(), vec3.end());
    for (auto i : vec3) { 
        cout << i << " "; 
    } 
    cout << endl;
    cout << "Sorting a vector in descending order: "; 
    sort(vec3.begin(), vec3.end(), greater<int>()); 
    for (auto i : vec3) { 
        cout << i << " "; 
    }
    cout << endl; 
    // abive is using built-in function. now sorting without built-in fcns 
    int tem1, tem2; 
    for (int i = 0 ; i < vec3.size(); i++) {  
        for (int j=0; j<i+1 ; j++) { 
            if (vec3[i] < vec3[j]) { 
                // statement
                tem1 = vec3[i];
                vec3[i] = vec3[j]; 
                vec3[j] = tem1; 
            }
        }
    }
    cout << "sorting vector without built-in sort function: ";
    for (int i=0; i< vec3.size(); i++) { 
        cout << vec3[i] << " "; 
    }
    cout << endl; 
    
    // Copying a vector 
    vector<int> vec4(vec3); 
    cout << "copying vector 3 into vector 4: "; 
    for (auto i:vec4) {
        cout << i << " ";
    }
    vector<int> vec5 = {101, 103, 102, 105, 104};
    // swaping vectors
    cout << endl << "Swapping: ";
    vec5.swap(vec4); 
    for (auto i : vec5) {
        cout << i << " "; 
    }
    
    // Removing duplicates
    vector<int> vec6 = {10, 40, 40, 30, 20, 20, 100};
    cout << endl;
    for (auto i:vec6) { 
        cout << i << " "; 
    }
    // first sort the vector 
    sort(vec6.begin(), vec6.end()); 
    cout << endl;
    for (auto i:vec6) { 
        cout << i << " "; 
    }
    //  move all duplicates to the last of the vector 
    auto ite = unique(vec6.begin(), vec6.end()); // 'ite' points to the position where the UNIQUE elements end. 
    /*cout << endl;
    for (auto i:ite) { 
        cout << i << " "; 
    }*/
    // remove all duplicates 
    vec6.erase(ite, vec6.end()); // removes/erases vectors from ite till the end of vec6 
    cout << endl;
    for (auto i:vec6) { 
        cout << i << " "; 
    }
    
    // now Deque - double-ended queue 
    cout << endl; 
    deque<int> dq1 = {1, 3, 6}; 
    // insertin elements at back and front 
    dq1.push_back(10); 
    dq1.push_front(0); 
    dq1.insert(dq1.begin() + 2, 100);
    for (auto i:dq1) { 
        cout << i << " "; 
    } 
    cout << endl; 
    cout << dq1.at(3) << endl; 
    // note: push_baks or push_front; insert numbers like insert
    // note: pop_back or pop_front; deletes / removes like erase
    deque<int> dq2 = {1, 2, 3, 4, 10}; 
    dq2.clear(); 
    cout << "using dq2.clear(): ";
    for (auto i : dq2) { 
        cout << i << " "; 
    }
    cout << endl; 
    bool xx = dq2.empty();
    cout << xx << "'1' here means TRUE in Boolean logic" << endl; 

    

    return 0;
}

/*
side notes: note that .size() only works for vectors not when defining an array via traditional methods like: int arr[] = ...



*/
/*
#include <iostream>
#include <algorithm>
#include <array>
#include <iterator>
#include <string>
#include <bits/stdc++.h>
using namespace std; 

int main()
{
    int arr1[] = {1, 2, 3, 4, 5}; 
    int sum = 0;
    int sizearr1; 
    sizearr1 = sizeof(arr1) / sizeof(arr1[0]); 
    for (int i=0; i<sizearr1; i++) { 
        sum = sum+arr1[i];
    } 
    cout << sum << endl; 
    // or use built-in fcn
    // cout << arr1.size() << endl;
    array<int, 3> arr2 = {1, 2, 3};
    cout << arr2.size() << endl; 
    
    

    return 0;
}
*/
/*
#include <iostream>
#include<bits/stdc++.h>
using namespace std; 

int main()
{
    string name1; // if you use const before the string name1; then the c++ function like name1.length does not work  
    string name2; 
    name1 = "Alex";
    name2 = "Allicia";
    
    //cout << strlen(name1) << endl; this is wrong as strlen strcpy strcat only work for c-style strings (i.e., char[]) 
    cout << name1.length() << endl; 
    // note: c only supports char (and functions like: strcpy, strcat, strlength ...); but c++ supports both char and string 
    char charname1[] = {'A', 'l', 'e', 'x'}; // this is c-style 
    cout << strlen(charname1) << endl; 
    string name3 = "Reza";
    //string name4[] = "Reza"; this is wrong. 
    // c-style char needs an array ([]) but c++ does not need array (does not need [] if you do it will yield error)
    

    return 0;
}
*/
// \ or / is format specifier 
/*
cout << "User, please enter a numebr between 1 and 7: " ;
    int n;  
    cin >> n; 
    cout << endl;
    switch(n){ 
    case 1: 
    cout << "Monday" << endl; 
    break;
    case 2: 
    cout <<"Tuesday"<<endl;
    break;
    case 3:
    cout<<"Wednesday" << endl; 
    break;
    case 4: 
    cout<<"Thursday"<< endl;
    break;
    case 5: 
    cout <<"Friday"<<endl;
    break; 
    case 6:
    cout <<"Saturday"<<endl; 
    break;
    case 7:
    cout <<"Sunday" << endl; 
    break; 
}
*/
/*
    // do-while example 
    int number2 = 100;
    do { 
        number2 = number2+1;
        cout << number2 << " ";
    }
        while (number2<=105) ;
*/
/*
    int arr1[2][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}}; 
    for (int i=0; i<2; i++) { 
        for (int j=0; j<4; j++) { 
            cout << arr1[i][j] << " ";
        }
        cout << endl; 
    }
*/
/*
  int arr1[2][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}}; 
    for (int i=0; i<2; i++) { 
        for (int j=0; j<4; j++) { 
            cout << arr1[i][j] << " ";
        }
        cout << endl; 
    }
    int arr2[3][2]; 
    cout << "enter elements for a matrix of 2 by 3, here: " << endl; 
    for (int i=0; i<3; i++) { 
        for (int j=0; j<2; j++) { 
            cin >> arr2[i][j];
        }
    }
    cout << "matric as arr2 provided by the user is: "<< endl; 
    for (int i=0; i<3; i++) { 
        for (int j=0; j<2; j++) { 
            cout << arr2[i][j] << " ";
        }
        cout << endl;
    } 
    // multiplication of 2 matrices 
    int arr3[3][4] ;//= {{0,0,0,0}, {0,0,0,0}, {0,0,0,0}}; 
    for (int i=0; i<3; i++) { 
        for (int j=0; j<4; j++) { 
            for (int k=0; k<2; k++) { 
                arr3[i][j] *= arr1[i][k]*arr2[k][j];
            }
        }
    }
    // print result matrix 
    cout << "arr3 as multiplictation of arr1 and arr2 is: " << endl;
    for(int i=0; i<3; i++) { 
        for (int j=0; j<4; j++) { 
            cout << arr3[i][j] << " ";
        }
        cout << endl;
    } 
    
    */
    /* 
        string fname; 
    string lname;
    string flname;
    cout << "user, enter your first and last name in order: " << endl; 
    cin >>fname;
    cin >> lname; 
    // or use getline
    getline(cin, flname); 
    cout << flname << endl; 
    // difference between cin versus getline is: cin accepts only one element if you press enter it is done 
    but getline works with enter 
    cout << "break" << endl;
    getline(cin, flname); 
    cout << flname << endl; 
    cout << "Done - break" << endl; 
    */
    /* 
    #include <iostream>
using namespace std; 

struct car { 
    string name;
    int year;
} ;

int main()
{
    car mycar; 
    mycar.name = "Lexus";
    mycar.year = 2020; 
    cout << mycar.name << " " << mycar.year << endl; 
    int arr1[] = {1, 2, 3, 4, 5}; 
    cout << arr1[1]; // to access specific array element or in non-traditional array like: array<int, 5> arr1 ... use at()

    return 0;
}
    */
/* 
    // &xx where & is the memory address operator.this is making a nptr as a pointer to the integer xx storing the memory address of xx. 
    // pointers are used in c++ for dynamic memory allocation. we are assigning the '&xx' (memory address) to pointer named: nptr.
    // ampersand sign means address-of operator.
*/
  /* 
  #include <iostream>
using namespace std; 

void fcnFac1(int num) { // if using void as return type of function, then you cannot assign anything to this in the main loop (i.e., 
//i.e., int result = fcnFac1(number) in the main loop). And with void you should use the cout or printf in th evoid function!!!
    int fac = 1; 
    for (int i=1; i<=num; i++) {
        fac = fac*i;
    }
    cout << fac << endl; 
}

int fcnFac2(int num2) { 
    int fac2 = 1;
    for (int i=1; i<=num2; i++) { 
        fac2 = fac2*i; 
    }
    return fac2;// cout can be also defined in the main code body 
}

int main()
{
    int number = 5; 
    int result; 
    result = fcnFac2(number);
    cout << result << endl; 
    fcnFac1(number); 
    

    return 0;
}
*/
/* 
#include <iostream>
using namespace std; 

int main()
{
    int count = 0;
    do { 
        cout << count++ << endl;
    }
    while(count <=10);

    return 0;
}
*/
/* 
#include <iostream>
using namespace std; 

class Test { // class name  
    public: // access specifier / modifier 
    int A; // class member type and variable name 
    
    // constructor to declare and initialize the member variable 
    Test(int a) { // parametrized constructor 
    A = a; 
    }
    
    // define and declare a member function to print A: 
    void printfcn() { 
        cout << "A is: " << A << endl; 
    }
};


int main()
{
    Test Obj(10);
    Obj.A = 12; 
    Obj.printfcn();

    return 0;
}
*/
/*
 #include <iostream>
using namespace std; 

class Student { 
    public: 
    
    string Name; 
    int Grade; 
    
    Student(string name, int grade) { 
        Name = name; 
        Grade = grade; 
    }
    
    // members function
    void memberfcn() { 
        cout << "Student Name is: " << Name << endl;
        cout << "Student Grade is: " << Grade << endl; 
    }
};

int main()
{
    // first we need to create an object of class Student 
    Student SCObj("Alex", 95); // look since the constructor is parametrized (we need to pass in arguments/parameters), we need to pass them here as well; 
    // initialize the created object with values 
    //SCObj.Name = "Alex";
    //SCObj.Grade = 95; 
    // invoke or call the member function defined inside th eclass 
    SCObj.memberfcn();
    // or use default constructor then remove () when defining the pbject and assign values after creating object 
    // Student SCObj; 
    //SCObj.Name = "Alex";
    //SCObj.Grade = 95; 
    
    return 0;
} 
  */
  /* 
  #include <iostream>
using namespace std; 

class Numbers { 
    public: 
    int N; 
    Numbers() {
    }
    void print() { 
        do{
            cout << N++ << " "; 
        }
        while(N < 10);
    }
};

int main()
{
    Numbers Obj; 
    Obj.print(); 

    return 0;
}
  */
 
 /*
 two methods: 
 #include <iostream>
using namespace std; 

int fcnfac(int N) { 
    int Fac = 1; 
    for (int i=1; i<=N; i++) { 
        Fac = Fac*i; 
    }
    cout << "Number provided by the user is: " << N << " and the factorial is: " << Fac; 
    return Fac; 
}

int main()
{
    cout << "User needs to provide an integer number here: "; 
    int number; 
    cin >> number; 
    fcnfac(number); 

    return 0;
}
 or:
 #include <iostream>
using namespace std; 

void fcnfac(int N) { 
    int Fac = 1; 
    for (int i=1; i<=N; i++) { 
        Fac = Fac*i; 
    }
    cout << "Number provided by the user is: " << N << " and the factorial is: " << Fac; 
}

int main()
{
    cout << "User needs to provide an integer number here: "; 
    int number; 
    cin >> number; 
    fcnfac(number); 

    return 0;
}
 */
 /* to use a function to know if a number is odd or even 
 #include <iostream>
using namespace std; 

void fcn1(int N) { 
    if (N % 2 != 0) { 
        cout << N << " is ODD number" << endl; 
    }
    else { 
        cout << N << " is EVEN number" << endl; 
    }
}

int main()
{
    cout << "User needs to provide a number: " << endl; 
    int usernumber; 
    cin >> usernumber; 
    fcn1(usernumber); 

    return 0;
}
*/ 
/* 
#include <iostream>
using namespace std; 

class Test { 
    public: 
    int N; 
    Test(int n) { 
        N = n; 
    }
    void fcnfac() { 
        int fac = 1; 
        for (int i=1; i<=N; i++) { 
            fac = fac*i; 
        }
        cout << fac << endl; 
    }
};

int main()
{
    Test t(5); 
    t.fcnfac(); 

    return 0;
}
*/
 
/* 
#include <iostream>
using namespace std; 

void fcn1(int N1) { // meaing thae fcn accepts only integer type and returns the N as printging this  
    cout << "invoking function 1: " << N1 << endl; 
}
int fcn2(int N2) {
    cout << "invoking function 2: " << N2 << endl; 
    return N2;
}

int main()
{
    int number = 10;
    fcn1(number); 
    fcn2(number); 

    return 0;
}
*/
// parametrised versus non-parametrised constructors 
/*
#include <iostream>
using namespace std; 

class Test { 
    public: 
    int N;
    
    Test() { 
    }
    
    void fcn(int N) { 
        cout << N << endl; 
    }
}; 

int main()
{
    Test T; 
    T.N = 10; // if constructor is not parametrized, you feed in the numbers in the main code 
    T.fcn(10); 

    return 0;
}
*/

/*
#include <iostream>
using namespace std; 

class Test { 
    public: 
    int N;
    
    Test(int n) {
        N = n; 
    }
    
    void fcn(int N) { 
        cout << N << endl; 
    }
}; 

int main()
{
    Test T(10); // if constructor is not parametrised you feed/pass in the input in the object creation level.
    //T.N = 10;
    T.fcn(10); 

    return 0;
}
*/
/*
#include <iostream>
using namespace std; 

class BClass { 
    public: 
    int N;
    
    BClass() {
    }
    void SetN(int n) {
        N = n; 
        cin >> N; 
    }
    void PrintN() { 
        cout << N << endl;
    }
};

int main()
{
    BClass obj1, obj2;
    obj1.SetN(1); 
    obj1.PrintN();

    return 0;
}
*/
/*
#include <iostream>
using namespace std; 

class Week { 
    public: 
    int Number; 
    
    Week() {
        
    }
    
    void fcn() { 
        cout << "User should provide an integer between 1 and 7: " << endl; 
        int n;
        cin >> n;
         Number = n; 
        if (Number >= 1 && Number <= 7) {
            switch(Number) { 
                case 1: 
                cout << "Sunday"; 
                break;
                case 2: 
                cout << "Monday"; 
                break; 
                case 3: 
                cout << "Tuesday"; 
                break; 
                case 4: 
                cout << "Wednesday"; 
                break;
                case 5:
                cout << "Thursday";
                break; 
                case 6: 
                cout << "Friday"; 
                break; 
                case 7: 
                cout << "Saturday";
                break;
            }
        }
        else {
            cout << "Invalid number!" << endl; 
    }
    
}
};
int main()
{
    Week wobj; 
    wobj.fcn();

    return 0;
}
*/
