/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/
#include <iostream>
#include <algorithm>
# include <array>
# include <iterator>
# include <string>

using namespace std;

int main()
{
    array<int, 5> arr1 = {1, 2, 3, 4, 5}; // array is a fixed-size data container but vector is dynamic-size data container - recap: 'string' is not a built-in data type in c (although it is in c++)
// in c you present c you need to have an array of characters via 'char' built-in data type. double colon is scope resolution operator giving access to identifiers in different scopes to avoid name conflicts. 
    array<string, 5> arr2 = {"Alex", "a", "b", "c", "David"}; //iterator is abstract pointer 
    cout << "Size of arrays using built-in functions form STL: " << endl; 
    cout << arr1.size() << endl;
    cout << arr2.size() << endl; // you could also use non-built-in fcn / method like: sizeof(arr1) / sizeof(arr1[0])
    // to print the members user-defined for-loop or built-in 
    int sizeofarr1 = arr1.size();
    for (int i = 0; i < arr1.size(); i++) { 
        cout << arr1[i] << " " ;
    }
    cout << endl; 
    // now using STL built-in fcns 
    for (auto i : arr1) {
        cout << i << " " ;
    }
    cout << endl; 
    // sort the arrays - using built-in fcn otherwise you need to define and declare temp param 
    sort(arr1.begin(), arr1.end(), greater<int>()); // in descending order, remove greater<int>() to do in ascending order
    cout << endl << "Sorted: " ;
    for (auto i : arr1) {
        cout << i << " ";
    }
    // question how to store it in another variable/array to aovid over-writing 
    cout << endl; 
    arr1.fill(10);
    for (auto i : arr1) {
        cout << i << " "; 
    }
    /* cout << endl; 
    for (auto i : arr1) {
        cout << &i << " "; 
    }*/
    cout << endl; 
    cout << "printing here: " << arr1.begin() << " " << arr1.end() << endl; 
    
    array<int, 5> arr3 = {11, 12, 13, 14, 15};
    for (auto i : arr3) {
        cout << i << " ";
    }
    cout << endl; 
    cout << "arr3.begin is: " << arr3.begin() << "So begin / end give you the memory address" << endl;
    cout << "arr3.front is: " << arr3.front() << endl;
    cout << arr3.back() << endl; 
    swap(arr3[0], arr3[2]); 
    for (auto i : arr3) {
        cout << i << " ";
    }
    cout << endl; 
    bool x = arr3.empty(); // false (not empty) or you could also use if as conditional statement
    cout << x << endl; // x in this section is a boolean operator with 0 and 1 outputs 
    cout << arr3.at(4) << endl; // at built-in fcn is used to access a soecific element of a data container
    // 2D arrays 
    array<array<int, 4>, 2> arr4 = {{{1, 2, 3, 4}, {5, 6, 7, 8}}}; // declaring and initializing 2D array 
    // or: array<array<int, 4>, 2> arr4 = 
    // {array<int, 4> {1, 2, 3, 4}, array<int, 4> {5, 6, 7, 8}}; // declaring and initializing 2D array 
    for (int i=0; i<arr4.size(); i++) { 
        for (int j=0; j<arr4[i].size(); j++) {
            cout << arr4[i][j] << " ";
        }
        cout << endl; 
        }
        cout << endl; 
    // if manual method: 
    int arr5[2][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}}; 
    for (int i=0; i<2; i++) { 
        for (int j=0; j<4; j++) { 
            cout << arr5[i][j] << " ";
        }
        cout << endl;; 
    }
    array<array<int, 4>, 2> arr6 = {{{4, 3, 2, 1}, {8, 7, 6, 5}}};
    // sorting 2D array 
    //sort(arr6.begin(), arr6.end());
    // printing using auto method 
    cout << "arr6 is: "; 
    for (auto i : arr6) { // this is range-based-for-loop syntax: meaning taking each element (row) at a time 
        for (auto j : i) { // means taking each element in i (row) one a ta time 
            cout << j << " ";
        }
        cout << endl;
    }
    cout << endl; 
    // sorting the arr6 :
    cout << "Sorted arr6 is: "; 
    for (auto& i : arr6) { // why to have ampersand? if not it will change the copy but not the original
        sort(i.begin(), i.end()) ; 
        for (int j : i) {
            cout << j << " "; 
        }
        cout << endl;
    }
    // second method to sort whtout using STL built-in function: sort 
    array<array<int, 4>, 2> arr7 = {{{4, 3, 2, 1}, {8, 7, 6, 5}}}; 
    int tem1, tem2; 
    for (int i=0; i<4; i++) { 
        for (int ii=0; ii<4; ii++) { 
            if (arr7[0][i] < arr7[0][ii]) {
                tem1 = arr7[0][i];
                arr7[0][i] = arr7[0][ii]; 
                arr7[0][ii] = tem1; 
            }
        }
    }
    cout << endl << "Sorted without built-in function of STL (sort): ";
    for (auto i : arr7[0]) {
        cout << i << " ";
    }
    cout << endl; 
    //
    
                

    return 0;
}
